version: '3.8'

services:
  # Redis for caching and pub/sub
  redis:
    image: redis:7-alpine
    container_name: crypto-exchange-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - crypto-exchange-network

  # TimescaleDB for time-series data
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: crypto-exchange-timescaledb
    environment:
      POSTGRES_DB: crypto_exchange
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - crypto-exchange-network

  # Backend API service
  backend:
    build:
      context: ./crypto-exchange-backend
      dockerfile: Dockerfile
    container_name: crypto-exchange-backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:postgres@timescaledb:5432/crypto_exchange
    depends_on:
      redis:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    volumes:
      - ./crypto-exchange-backend/logs:/app/logs
    networks:
      - crypto-exchange-network

  # Frontend React application
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: crypto-exchange-frontend
    ports:
      - "8080:8080"
    environment:
      - REACT_APP_API_URL=http://backend:3000
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - crypto-exchange-network

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: crypto-exchange-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - crypto-exchange-network

volumes:
  redis_data:
  timescaledb_data:

networks:
  crypto-exchange-network:
    driver: bridge